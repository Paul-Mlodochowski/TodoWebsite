@using System.Text.RegularExpressions



<div class="form-check text-center mt-3">
            <input class="form-check-input" type="checkbox" value="" id="filterToggle" @onchange="ToggleFilter">
            <label class="form-check-label filterLable" for="filterToggle">
                Turn On filtring
            </label>
        </div>
        @if (IsDisabled) {
    <div class="w-65 mt-4 d-flex flex-row justify-content-between border border-dark rounded p-5 flex-wrap">
        <div class="form-check w-25 mb-2 ml-1">
            <input class="form-check-input" type="checkbox" value="" id="defaultCheck2" disabled>
            <label class="form-check-label" for="defaultCheck2">
                IsDone?<svg xmlns="http://www.w3.org/2000/svg" width="28" height="30" fill="rgb(57, 191, 37)" class="bi bi-check-all" viewBox="0 0 16 16">
                    <path d="M8.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L2.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093L8.95 4.992a.252.252 0 0 1 .02-.022zm-.92 5.14.92.92a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 1 0-1.091-1.028L9.477 9.417l-.485-.486-.943 1.179z"/>
                </svg>
            </label>
        </div>
        <div class="input-group mb-3 w-65">
            <span class="input-group-text" id="inputGroup-sizing-default">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="25" fill="currentColor" class="bi bi-bookmarks" viewBox="0 0 16 16">
                    <path d="M2 4a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v11.5a.5.5 0 0 1-.777.416L7 13.101l-4.223 2.815A.5.5 0 0 1 2 15.5V4zm2-1a1 1 0 0 0-1 1v10.566l3.723-2.482a.5.5 0 0 1 .554 0L11 14.566V4a1 1 0 0 0-1-1H4z"/>
                    <path d="M4.268 1H12a1 1 0 0 1 1 1v11.768l.223.148A.5.5 0 0 0 14 13.5V2a2 2 0 0 0-2-2H6a2 2 0 0 0-1.732 1z"/>
                </svg>
            </span>
            <input type="text" class="form-control" placeholder="Filter by tags (seperate by space)" disabled>
        </div>
        <div class="input-group mb-3">
            <span class="input-group-text" id="inputGroup-sizing-default">
                <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
                </svg>
            </span>
            <input type="text" class="form-control" aria-label="Sizing example input" placeholder="Search by title or description" disabled>
        </div>
        <div class="input-group mb-3">
            <span class="input-group-text" id="inputGroup-sizing-default">
                <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-calendar-check" viewBox="0 0 16 16">
                    <path d="M10.854 7.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 9.793l2.646-2.647a.5.5 0 0 1 .708 0z"/>
                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"/>
                </svg>
            </span>
            <input type="text" class="form-control" aria-label="Sizing example input" placeholder="Search by Date dd-mm-yyyy" disabled>
            <div class="input-group mb-0 mt-3 d-flex justify-content-center">
                <button type="button" class="btn btn-primary w-50 "disabled>Filter</button>
            </div>
        </div>
    </div>
}
else {
    <div class="w-65 mt-4 d-flex flex-row justify-content-between border border-dark rounded p-5 flex-wrap">
        <div class="form-check w-25 mb-2 ml-1">
            <input class="form-check-input" type="checkbox" value="" id="defaultCheck2" @bind="FiltringOfDone">
            <label class="form-check-label" for="defaultCheck2">
                IsDone?<svg xmlns="http://www.w3.org/2000/svg" width="28" height="30" fill="rgb(57, 191, 37)" class="bi bi-check-all" viewBox="0 0 16 16">
                    <path d="M8.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L2.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093L8.95 4.992a.252.252 0 0 1 .02-.022zm-.92 5.14.92.92a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 1 0-1.091-1.028L9.477 9.417l-.485-.486-.943 1.179z"/>
                </svg>
            </label>
        </div>
        <div class="input-group mb-3 w-65">
            <span class="input-group-text" id="inputGroup-sizing-default">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="25" fill="currentColor" class="bi bi-bookmarks" viewBox="0 0 16 16">
                    <path d="M2 4a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v11.5a.5.5 0 0 1-.777.416L7 13.101l-4.223 2.815A.5.5 0 0 1 2 15.5V4zm2-1a1 1 0 0 0-1 1v10.566l3.723-2.482a.5.5 0 0 1 .554 0L11 14.566V4a1 1 0 0 0-1-1H4z"/>
                    <path d="M4.268 1H12a1 1 0 0 1 1 1v11.768l.223.148A.5.5 0 0 0 14 13.5V2a2 2 0 0 0-2-2H6a2 2 0 0 0-1.732 1z"/>
                </svg>
            </span>
            <input type="text" class="form-control" placeholder="Filter by tags (seperate by space)" @bind="FiltringOfTags">
        </div>
        <div class="input-group mb-3">
            <span class="input-group-text" id="inputGroup-sizing-default">
                <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
                </svg>
            </span>
            <input type="text" class="form-control" aria-label="Sizing example input" placeholder="Search by title or description" @bind="Searching">
        </div>
        <div class="input-group mb-3">
            <span class="input-group-text" id="inputGroup-sizing-default">
                <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" class="bi bi-calendar-check" viewBox="0 0 16 16">
                    <path d="M10.854 7.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 9.793l2.646-2.647a.5.5 0 0 1 .708 0z"/>
                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z"/>
                </svg>
            </span>
            <input type="date" class="form-control" aria-label="Sizing example input" placeholder="Search by Date dd-mm-yyyy"  @bind="FiltringOfDate">
            <div class="input-group mb-0 mt-3 d-flex justify-content-center">
                <button type="button" class="btn btn-primary w-50" @onclick="CheckWhichFiltringResultsUserIsUsing">Filter</button>
            </div>
        </div>
    </div>
}






@code {
    [Parameter]
    public EventCallback<List<TodoList>> ChangeList { get; set; }
    [Parameter]
    public EventCallback ShowResults { get; set; }
    [Parameter]
    public DateTime MinDateTime { get; set; }



    //Filtring
    private bool FiltringOfDone { get; set; } = false;
    private DateTime FiltringOfDate { get; set; }
    private string FiltringOfTags { get; set; }
    private string Searching { get; set; }
    private bool IsDisabled { get; set; } = true;


    private void ToggleFilter() {
        FiltringOfDate = MinDateTime;
        IsDisabled = !IsDisabled;
        if (IsDisabled)
            ShowResults.InvokeAsync();
    }

    private void CheckWhichFiltringResultsUserIsUsing() {
        var filtringMethods = new List<Action>();
        List<TodoList> TodoItems = new List<TodoList>();
        using(var dbContex = new TodoDatabaseContex()){
            TodoItems = dbContex.TodoLists.ToList<TodoList>();
            foreach (var item in dbContex.TodoLists)
            {
                dbContex.Tags.Where(tag => tag.TodoListId == item.Id ).ToList<Tag>();  // To dodaje tagi do items

            }
            filtringMethods.Add(() =>
            {
                var query = from item in TodoItems
                            where item.IsDone == FiltringOfDone
                            select item;

                if(query is not null)
                    TodoItems = TodoItems.Where(t => query.Contains<TodoList>(t)).ToList<TodoList>();

            });
            if( DateTime.Compare(MinDateTime,FiltringOfDate) != 0)
                filtringMethods.Add(() =>
                {
                    var query = from item in TodoItems
                                where DateTime.Compare(item.Date,FiltringOfDate) >= 0
                                select item;

                    
                        TodoItems = TodoItems.Where(t => query.Contains<TodoList>(t)).ToList<TodoList>();

                });
            if(FiltringOfTags is not null && FiltringOfTags != "")
                filtringMethods.Add(() =>
                {
                    List<Tag> listofTags = TagFormater.ReturnListOfFormatedTags(FiltringOfTags);
                    List<string> valueToCheck = new List<string>();
                    listofTags.ForEach(t =>valueToCheck.Add(t.TagValue.ToLower()));


                    var listOfTodoList = new List<TodoList>();
                    foreach(var value in valueToCheck) {
                        foreach(var todoItem in TodoItems) {
                            foreach(var todoTag in todoItem.Tags) {
                                if(String.Compare(todoTag.TagValue.ToLower(),value) == 0) {
                                    listOfTodoList.Add(todoItem);
                                    break;
                                }
                            }
                        }
                    }
                    
                        TodoItems = TodoItems.Where(t => listOfTodoList.Contains(t)).ToList<TodoList>();



                });
            if(Searching is not null && Searching != "")
                filtringMethods.Add(() =>
                {
                    Regex rx = new Regex(@Searching, RegexOptions.IgnoreCase);

                    var query = from item in TodoItems
                                where rx.IsMatch(item.Title) || rx.IsMatch(item.Description)
                                select item;
                    if(query is not null)
                        TodoItems = TodoItems.Where(t => query.Contains(t)).ToList<TodoList>();

                });

        };
        foreach (var action in filtringMethods) // wywołuje wszystkie pożądane funkcjee
        {
            action.Invoke();
        }
        ChangeList.InvokeAsync(TodoItems);

    }
}
