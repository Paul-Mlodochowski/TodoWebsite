// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TodoWebsite.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\_Imports.razor"
using TodoWebsite;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\_Imports.razor"
using TodoWebsite.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\_Imports.razor"
using TodoWebsite.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\_Imports.razor"
using TodoWebsite.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\Pages\Index.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\Pages\Index.razor"
using Microsoft.Extensions.Logging;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\Pages\Index.razor"
using NLog;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 86 "C:\Users\PAWEŁ\Desktop\Vis Studio\TodoWebsite\TodoWebsite\Pages\Index.razor"
      

    private TodoWebsite.Pages.Components.Popout Modal { get; set; }
    private TodoWebsite.Pages.Components.Warning Warning { get; set; }
    private List<TodoList> List { get; set; }
    private List<Tag> ListOfTags { get; set; } = new List<Tag>();
    private Logger logger = NLog.LogManager.GetCurrentClassLogger();
    private DateTime MinDateValue { get; set; }

    protected async override Task OnInitializedAsync() {


        using (var dbContext = Db)
        {
            var ListToAdd = new List<TodoList>(); 

            dbContext.Database.EnsureCreated();

            foreach (var item in dbContext.TodoLists)
            {
                dbContext.Tags.Where(tag => tag.TodoListId == item.Id ).ToList<Tag>();  // dodaje tagi do items
                ListToAdd.Add(item);
            }
            List = new List<TodoList>(ListToAdd);
            if (List.Count > 0)
                SetMinDateValue();


        }

        await base.OnInitializedAsync();
    }
    private void TakeResault (List<TodoList> newTodo){
        List = newTodo;
    }
    private void ShowResults() {
        List.Clear();
        using(var dbContex = new TodoDatabaseContex()){
            foreach (var item in dbContex.TodoLists)
            {
                dbContex.Tags.Where(tag => tag.TodoListId == item.Id ).ToList<Tag>();
                List.Add(item);
            }
        }
    }
    private async void  AddNewTodoTask(TodoList list) {
        using(var dbContex = new TodoDatabaseContex()){
            bool isCompleted = Task.WhenAll(dbContex.TodoLists.AddAsync(list).AsTask(),dbContex.AddRangeAsync(list.Tags)).IsCompletedSuccessfully;
            if (!isCompleted)
                logger.Error("Cannot add to db {list} Id: {id}", list, list.Id);

            await dbContex.SaveChangesAsync();
        }
        logger.Info("Dodano nowy item {item} o id {id}",list,list.Id);
        ShowResults();
        if (List.Count == 0)
                SetMinDateValue();
    }
    private void Update(TodoList list) {
        using(var dbContex = new TodoDatabaseContex()){
            var newTags = list.Tags;
            var tagsToDelete = dbContex.Tags.Where(item => item.TodoListId == list.Id);
            dbContex.Tags.RemoveRange(tagsToDelete);
            dbContex.Tags.AddRange(newTags);
            dbContex.TodoLists.Update(list);
            dbContex.SaveChangesFailed += (object x , SaveChangesFailedEventArgs a ) => logger.Error("Cannot Update to db {list} Id: {id}", list, list.Id);
            dbContex.SaveChanges();
        }
        logger.Info("Zaktualizowano  item {item} o Id {id}",list,list.Id);
        ShowResults();
    }
    private void Delete(int id) {
        using(var dbContex = new TodoDatabaseContex()){

            var itemToDelete = dbContex.TodoLists.Where(item => item.Id == id).FirstOrDefault<TodoList>();
            var tagsToDelete = dbContex.Tags.Where(item => item.TodoListId == itemToDelete.Id);
            dbContex.TodoLists.Remove(itemToDelete);
            dbContex.Tags.RemoveRange(tagsToDelete);
            dbContex.SaveChangesFailed += (object x , SaveChangesFailedEventArgs a ) => logger.Error("Cannot Remove to db {list} Id: {id}", itemToDelete, itemToDelete.Id);
            dbContex.SaveChanges();
        }
        logger.Info("Usunięto item o Id {id}",id);
        ShowResults();
    }
    private void ChangeStatus(TodoList todoItem, object obj) {
        var newValue = (bool)obj;
        using(var dbContex = new TodoDatabaseContex()){
            todoItem.IsDone = newValue;
            dbContex.TodoLists.Update(todoItem);
            dbContex.SaveChangesFailed += (object x , SaveChangesFailedEventArgs a ) => logger.Error("Cannot Update to db {list} Id: {id}", todoItem, todoItem.Id);
            dbContex.SaveChanges();
        }
        logger.Info("Zmieniono status z {value} na {newValue} o Id: {id}",!newValue, newValue, todoItem.Id);


        ShowResults();
    }
    private void SortByDone(object obj) {
        if ((bool)obj)
            using (var dbContex = new TodoDatabaseContex()) {
                var TodoItems = dbContex.TodoLists;
                foreach (var item in dbContex.TodoLists) {
                    dbContex.Tags.Where(tag => tag.TodoListId == item.Id).ToList<Tag>();  // To dodaje tagi do items

                }
                var query = from item in TodoItems
                            orderby item.IsDone
                            select item;
                List = query.ToList<TodoList>();

            }
        else
            ShowResults();
    }
    private void SetMinDateValue() {
        using (var dbContex = new TodoDatabaseContex()) {
                var TodoItems = dbContex.TodoLists;
                var MinValue = (from item in TodoItems
                               select item.Date).Min();
                this.MinDateValue = MinValue;

            }
    }

    

   

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TodoDatabaseContex Db { get; set; }
    }
}
#pragma warning restore 1591
